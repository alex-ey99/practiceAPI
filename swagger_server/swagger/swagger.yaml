openapi: 3.0.3
info:
  title: Book Library
  description: A catalog of books for a public library
  version: "1.0"
servers:
- url: http://localhost:8080/
tags:
- name: book
  description: Eveyrthing about books
- name: user
  description: User operations
paths:
  /books:
    get:
      tags:
      - book
      description: Return all the books available in the library
      operationId: books_get
      responses:
        "200":
          description: List with all the available books in the library
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
                x-content-type: application/json
      x-openapi-router-controller: swagger_server.controllers.book_controller
    post:
      tags:
      - book
      description: Add a new book to the library
      operationId: books_post
      requestBody:
        description: Details of the book to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        "201":
          description: Book successfully added to the library
        "400":
          description: Bad request
        "401":
          description: Unauthorized access
      security:
      - auth: []
      x-openapi-router-controller: swagger_server.controllers.book_controller
  /books/search:
    get:
      tags:
      - book
      description: Get all the books matching your search criteria
      operationId: books_search_get
      parameters:
      - name: title
        in: query
        description: Book title
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: year
        in: query
        description: Publication year
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: author
        in: query
        description: Book author
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: genre
        in: query
        description: Genre of book
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: List with all the books matching the search criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
                x-content-type: application/json
      x-openapi-router-controller: swagger_server.controllers.book_controller
  /books/{_id}:
    get:
      tags:
      - book
      description: Return the details about the book with the requested ID
      operationId: books_id_get
      parameters:
      - name: _id
        in: path
        description: ID of the book to request
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The requested book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        "404":
          description: Book with the requested ID not found
      x-openapi-router-controller: swagger_server.controllers.book_controller
    put:
      tags:
      - book
      description: Update the details about the book with the specified ID
      operationId: books_id_put
      parameters:
      - name: _id
        in: path
        description: ID of the book to modify
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: New details of the book to be modified
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        "200":
          description: Book successfully updated
        "401":
          description: Only admins and librarians can update books
        "404":
          description: Book with the requested ID not found
      security:
      - auth: []
      x-openapi-router-controller: swagger_server.controllers.book_controller
    delete:
      tags:
      - book
      description: Delete the book with the specified ID
      operationId: books_id_delete
      parameters:
      - name: _id
        in: path
        description: ID of the book to delete
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "201":
          description: Book successfully removed
        "401":
          description: Only admins and librarians can remove books
        "404":
          description: Book with the requested ID not found
      security:
      - auth: []
      x-openapi-router-controller: swagger_server.controllers.book_controller
  /user/register:
    post:
      tags:
      - user
      description: "Register, by creating username and password"
      operationId: user_register_post
      requestBody:
        description: "Username, password, role"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "201":
          description: User successfully registered
        "400":
          description: Username already exists
      x-openapi-router-controller: swagger_server.controllers.user_controller
  /user/login:
    post:
      tags:
      - user
      description: Login using username and password
      operationId: user_login_post
      requestBody:
        description: "Username, password"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user_login_body'
        required: true
      responses:
        "200":
          description: User successfully logged in
          content:
            application/json:
              schema:
                type: string
                description: JWT token
                x-content-type: application/json
        "400":
          description: Invalid username/password
      x-openapi-router-controller: swagger_server.controllers.user_controller
  /user/logout:
    get:
      tags:
      - user
      description: ""
      operationId: user_logout_get
      parameters:
      - name: username
        in: query
        description: Username to logout
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: User successfully logged out
        "400":
          description: Bad request
      x-openapi-router-controller: swagger_server.controllers.user_controller
components:
  schemas:
    User:
      required:
      - password
      - username
      type: object
      properties:
        _id:
          type: string
          readOnly: true
        username:
          maxLength: 20
          minLength: 1
          pattern: "^[a-zA-Z0-9]*$"
          type: string
        password:
          maxLength: 20
          minLength: 3
          pattern: "^[a-zA-Z0-9]*$"
          type: string
        role:
          type: string
          enum:
          - admin
          - librarian
          - student
        token:
          type: string
          readOnly: true
    Book:
      required:
      - author
      - title
      type: object
      properties:
        _id:
          type: string
          readOnly: true
        title:
          maxLength: 100
          minLength: 1
          pattern: "^[\\.\\,\\(\\)\\!\\?\\-\\_a-zA-Z0-9\\s]*$"
          type: string
        year:
          maximum: 2022
          minimum: 1400
          type: integer
        author:
          maxLength: 60
          minLength: 1
          pattern: "^[a-zA-Z\\s]*$"
          type: string
        pages:
          maximum: 5000
          minimum: 1
          type: integer
        genre:
          type: string
          enum:
          - novel
          - encyclopedia
          - comic
          - biography
          - history
      example:
        pages: 3014
        year: 1449
        author: author
        genre: novel
        _id: _id
        title: title
    user_login_body:
      type: object
      properties:
        username:
          maxLength: 20
          minLength: 1
          pattern: "^[a-zA-Z0-9]*$"
          type: string
        password:
          maxLength: 20
          minLength: 3
          pattern: "^[a-zA-Z0-9]*$"
          type: string
  securitySchemes:
    auth:
      type: apiKey
      description: "API key provided by the administrator, in order to be able to\
        \ add new books or modify the existing ones"
      name: api_key
      in: header
      x-apikeyInfoFunc: swagger_server.controllers.authorization_controller.check_auth

